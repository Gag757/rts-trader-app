import asyncio
from tinkoff.invest import AsyncClient, InstrumentIdType

TOKEN = "t.T3Y_FHopd2AHt6rHo2kG-cDcSe9vxjtXsMwCM3LzpYEZqgEII_dWtUwqjJ1utKZp3H-VgArGbPla-3K95MbteA"

async def get_rts_futures():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–æ–≤ –†–¢–°"""
    try:
        async with AsyncClient(TOKEN) as client:
            # –ò—â–µ–º —Ñ—å—é—á–µ—Ä—Å—ã –†–¢–°
            instruments = await client.instruments.futures()
            
            rts_futures = []
            for instrument in instruments.instruments:
                if "RTS" in instrument.name.upper() or "–†–ò–£" in instrument.name.upper():
                    rts_futures.append({
                        'name': instrument.name,
                        'figi': instrument.figi,
                        'ticker': instrument.ticker,
                        'expiration_date': instrument.expiration_date,
                        'lot': instrument.lot,
                        'currency': instrument.currency
                    })
            
            return rts_futures
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤: {e}")
        return []

async def main():
    print("üîç –ü–æ–∏—Å–∫ —Ñ—å—é—á–µ—Ä—Å–æ–≤ –†–¢–°...")
    futures = await get_rts_futures()
    
    if futures:
        print("\nüìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å—ã –†–¢–°:")
        print("-" * 80)
        for i, future in enumerate(futures, 1):
            print(f"{i}. {future['name']}")
            print(f"   FIGI: {future['figi']}")
            print(f"   –¢–∏–∫–µ—Ä: {future['ticker']}")
            print(f"   –î–∞—Ç–∞ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏: {future['expiration_date']}")
            print(f"   –õ–æ—Ç: {future['lot']}")
            print(f"   –í–∞–ª—é—Ç–∞: {future['currency']}")
            print("-" * 80)
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –±–ª–∏–∂–∞–π—à–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ—å—é—á–µ—Ä—Å
        active_futures = [f for f in futures if f['expiration_date'] is not None]
        if active_futures:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
            active_futures.sort(key=lambda x: x['expiration_date'])
            recommended = active_futures[0]
            print(f"\n‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π FIGI –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {recommended['figi']}")
            print(f"   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {recommended['name']}")
    else:
        print("‚ùå –§—å—é—á–µ—Ä—Å—ã –†–¢–° –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    asyncio.run(main())
