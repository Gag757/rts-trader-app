import streamlit as st
import pandas as pd
import datetime as dt
import asyncio
import matplotlib.pyplot as plt
from tinkoff.invest import AsyncClient, CandleInterval
from ta.trend import MACD, SMAIndicator, EMAIndicator, ADXIndicator, CCIIndicator, TRIXIndicator
from ta.momentum import RSIIndicator, StochasticOscillator, WilliamsRIndicator, ROCIndicator
from ta.volatility import BollingerBands, AverageTrueRange
from ta.volume import VolumeWeightedAveragePrice, OnBalanceVolumeIndicator
import time
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px


TOKEN = "t.T3Y_FHopd2AHt6rHo2kG-cDcSe9vxjtXsMwCM3LzpYEZqgEII_dWtUwqjJ1utKZp3H-VgArGbPla-3K95MbteA"
# –ë—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å FIGI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
FIGI = None
INTERVAL = CandleInterval.CANDLE_INTERVAL_15_MIN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
st.set_page_config(
    layout="wide", 
    page_title="–†–¢–° –¢—Ä–µ–π–¥–µ—Ä - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
    page_icon="üìà",
    initial_sidebar_state="expanded"
)

# –í–Ω–µ–¥—Ä—è–µ–º CSS –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
st.markdown("""
<style>
/* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
.main {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 0;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
h1 {
    color: #ffffff !important;
    font-weight: 700 !important;
    text-align: center !important;
    margin-bottom: 2rem !important;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3) !important;
}

h2 {
    color: #2c3e50 !important;
    font-weight: 600 !important;
    margin-bottom: 1rem !important;
}

h3 {
    color: #34495e !important;
    font-weight: 500 !important;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞ */
.sidebar .sidebar-content {
    background: linear-gradient(180deg, #f8f9fa 0%, #e9ecef 100%);
    border-right: 1px solid #dee2e6;
}

/* –ö–∞—Ä—Ç–æ—á–∫–∏ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã */
.stMetric {
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%) !important;
    border-radius: 15px !important;
    padding: 1rem !important;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1) !important;
    border: 1px solid #e9ecef !important;
    margin: 0.5rem 0 !important;
}

/* –ö–Ω–æ–ø–∫–∏ */
.stButton > button {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
    color: white !important;
    border: none !important;
    border-radius: 25px !important;
    padding: 0.5rem 1.5rem !important;
    font-weight: 600 !important;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4) !important;
    transition: all 0.3s ease !important;
}

.stButton > button:hover {
    transform: translateY(-2px) !important;
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6) !important;
}

/* –°–µ–ª–µ–∫—Ç–±–æ–∫—Å—ã */
.stSelectbox > div > div {
    background: white !important;
    border-radius: 10px !important;
    border: 2px solid #e9ecef !important;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1) !important;
}

/* –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è */
.stTextInput > div > div > input {
    border-radius: 10px !important;
    border: 2px solid #e9ecef !important;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1) !important;
}

/* –í–∫–ª–∞–¥–∫–∏ */
.stTabs > div > div > div > div {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
    border-radius: 10px 10px 0 0 !important;
}

.stTabs > div > div > div > div > button {
    color: white !important;
    font-weight: 600 !important;
    border-radius: 10px 10px 0 0 !important;
}

/* –°–∏–≥–Ω–∞–ª—ã */
.signal-up {
    background: linear-gradient(135deg, #00d4aa 0%, #00b894 100%) !important;
    color: white !important;
    padding: 2rem !important;
    border-radius: 20px !important;
    text-align: center !important;
    font-size: 2rem !important;
    font-weight: 700 !important;
    box-shadow: 0 8px 25px rgba(0, 212, 170, 0.4) !important;
    border: 3px solid #00d4aa !important;
    animation: pulse 2s infinite !important;
}

.signal-down {
    background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%) !important;
    color: white !important;
    padding: 2rem !important;
    border-radius: 20px !important;
    text-align: center !important;
    font-size: 2rem !important;
    font-weight: 700 !important;
    box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4) !important;
    border: 3px solid #ff6b6b !important;
    animation: pulse 2s infinite !important;
}

.signal-neutral {
    background: linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%) !important;
    color: white !important;
    padding: 2rem !important;
    border-radius: 20px !important;
    text-align: center !important;
    font-size: 2rem !important;
    font-weight: 700 !important;
    box-shadow: 0 8px 25px rgba(149, 165, 166, 0.4) !important;
    border: 3px solid #95a5a6 !important;
}

/* –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏ */
@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.02); }
    100% { transform: scale(1); }
}

/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ */
.stAlert {
    border-radius: 15px !important;
    border: none !important;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1) !important;
}

/* –ì—Ä–∞—Ñ–∏–∫–∏ */
.plotly-graph-div {
    border-radius: 15px !important;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1) !important;
    background: white !important;
}

/* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
@media (max-width: 768px) {
    .main {
        padding: 0.5rem !important;
    }
    
    h1 {
        font-size: 1.5rem !important;
    }
    
    .signal-up, .signal-down, .signal-neutral {
        font-size: 1.5rem !important;
        padding: 1.5rem !important;
    }
    
    .stMetric {
        padding: 0.5rem !important;
    }
    
    .stButton > button {
        padding: 0.4rem 1rem !important;
        font-size: 0.9rem !important;
    }
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ */
.metric-container {
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
    border-radius: 15px;
    padding: 1rem;
    margin: 0.5rem 0;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    border: 1px solid #e9ecef;
}

.metric-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: #2c3e50;
}

.metric-label {
    font-size: 0.9rem;
    color: #6c757d;
    margin-bottom: 0.5rem;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ */
.indicator-card {
    background: white;
    border-radius: 12px;
    padding: 1rem;
    margin: 0.5rem 0;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    border-left: 4px solid #667eea;
    transition: all 0.3s ease;
}

.indicator-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

.indicator-bullish {
    border-left-color: #00d4aa;
    background: linear-gradient(135deg, #f0fff4 0%, #e6fffa 100%);
}

.indicator-bearish {
    border-left-color: #ff6b6b;
    background: linear-gradient(135deg, #fff5f5 0%, #fed7d7 100%);
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ */
.status-container {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1rem;
    border-radius: 15px;
    text-align: center;
    margin: 1rem 0;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ */
.time-display {
    background: rgba(255,255,255,0.9);
    padding: 0.5rem 1rem;
    border-radius: 25px;
    display: inline-block;
    font-weight: 600;
    color: #2c3e50;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}
</style>
""", unsafe_allow_html=True)

def generate_demo_data(interval=CandleInterval.CANDLE_INTERVAL_15_MIN):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    if interval == CandleInterval.CANDLE_INTERVAL_5_MIN:
        freq = '5min'
        days = 3
    elif interval == CandleInterval.CANDLE_INTERVAL_15_MIN:
        freq = '15min'
        days = 7
    elif interval == CandleInterval.CANDLE_INTERVAL_30_MIN:
        freq = '30min'
        days = 14
    elif interval == CandleInterval.CANDLE_INTERVAL_HOUR:
        freq = '1h'
        days = 30
    elif interval == CandleInterval.CANDLE_INTERVAL_DAY:
        freq = '1D'
        days = 365
    else:
        freq = '15min'
        days = 7
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
    dates = pd.date_range(start=dt.datetime.now() - dt.timedelta(days=days), 
                         end=dt.datetime.now(), 
                         freq=freq)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ —à—É–º–æ–º
    np.random.seed(42)
    base_price = 1500
    trend = np.linspace(0, 50, len(dates))
    noise = np.random.normal(0, 10, len(dates))
    prices = base_price + trend + noise
    
    # –°–æ–∑–¥–∞–µ–º OHLC –¥–∞–Ω–Ω—ã–µ
    data = []
    for i, (date, price) in enumerate(zip(dates, prices)):
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º –¥–ª—è OHLC
        open_price = price + np.random.normal(0, 2)
        high_price = max(open_price, price) + abs(np.random.normal(0, 3))
        low_price = min(open_price, price) - abs(np.random.normal(0, 3))
        close_price = price + np.random.normal(0, 2)
        
        data.append({
            'time': date,
            'open': open_price,
            'high': high_price,
            'low': low_price,
            'close': close_price,
            'volume': np.random.randint(1000, 5000)
        })
    
    return pd.DataFrame(data)

async def get_rts_figi():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π FIGI —Ñ—å—é—á–µ—Ä—Å–∞ –†–¢–° –∏–ª–∏ –∞–∫—Ü–∏–π –†–¢–°"""
    try:
        async with AsyncClient(TOKEN) as client:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ñ—å—é—á–µ—Ä—Å—ã
            instruments = await client.instruments.futures()
            
            for instrument in instruments.instruments:
                if "RTS" in instrument.name.upper() or "–†–ò–£" in instrument.name.upper():
                    return instrument.figi, instrument.name, "futures"
            
            # –ï—Å–ª–∏ —Ñ—å—é—á–µ—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∞–∫—Ü–∏–∏
            stocks = await client.instruments.shares()
            
            for stock in stocks.instruments:
                if "RTS" in stock.name.upper() or "–†–ò–£" in stock.name.upper():
                    return stock.figi, stock.name, "shares"
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –∏–Ω–¥–µ–∫—Å –†–¢–°
            etfs = await client.instruments.etfs()
            
            for etf in etfs.instruments:
                if "RTS" in etf.name.upper() or "–†–ò–£" in etf.name.upper():
                    return etf.figi, etf.name, "etf"
            
            return None, None, None
    except Exception as e:
        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
        return None, None, None

async def get_all_futures():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
    try:
        async with AsyncClient(TOKEN) as client:
            instruments = await client.instruments.futures()
            
            futures_list = []
            for instrument in instruments.instruments:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω
                if hasattr(instrument, 'trading_status') and instrument.trading_status == 1:  # 1 = TRADING_STATUS_ACTIVE
                    futures_list.append({
                        'figi': instrument.figi,
                        'name': instrument.name,
                        'ticker': instrument.ticker,
                        'expiration_date': instrument.expiration_date,
                        'lot': instrument.lot,
                        'currency': instrument.currency,
                        'min_price_increment': getattr(instrument, 'min_price_increment', None)
                    })
            
            return futures_list
    except Exception as e:
        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–æ–≤: {e}")
        return []

async def get_all_shares():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π"""
    try:
        async with AsyncClient(TOKEN) as client:
            stocks = await client.instruments.shares()
            
            shares_list = []
            for stock in stocks.instruments:
                if hasattr(stock, 'trading_status') and stock.trading_status == 1:
                    shares_list.append({
                        'figi': stock.figi,
                        'name': stock.name,
                        'ticker': stock.ticker,
                        'lot': stock.lot,
                        'currency': stock.currency,
                        'min_price_increment': getattr(stock, 'min_price_increment', None)
                    })
            
            return shares_list
    except Exception as e:
        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π: {e}")
        return []

async def get_all_etfs():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ETF"""
    try:
        async with AsyncClient(TOKEN) as client:
            etfs = await client.instruments.etfs()
            
            etfs_list = []
            for etf in etfs.instruments:
                if hasattr(etf, 'trading_status') and etf.trading_status == 1:
                    etfs_list.append({
                        'figi': etf.figi,
                        'name': etf.name,
                        'ticker': etf.ticker,
                        'lot': etf.lot,
                        'currency': etf.currency,
                        'min_price_increment': getattr(etf, 'min_price_increment', None)
                    })
            
            return etfs_list
    except Exception as e:
        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ETF: {e}")
        return []

def format_instrument_name(instrument):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    name = instrument['name']
    ticker = instrument['ticker']
    
    if 'expiration_date' in instrument and instrument['expiration_date']:
        exp_date = instrument['expiration_date'].strftime('%m.%Y')
        return f"{name} ({ticker}) - {exp_date}"
    else:
        return f"{name} ({ticker})"

def create_instrument_selector():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
    st.sidebar.markdown("""
    <div style="text-align: center; padding: 1rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
    border-radius: 15px; color: white; margin-bottom: 1rem;">
        <h3 style="margin: 0; color: white;">üìä –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞</h3>
    </div>
    """, unsafe_allow_html=True)
    
    # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    st.sidebar.markdown("""
    <div style="background: white; padding: 1rem; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-bottom: 1rem;">
        <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">‚ö° –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä</h4>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.sidebar.columns(2)
    
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", key="refresh_btn"):
            st.rerun()
    
    with col2:
        if st.button("üéØ –î–µ–º–æ", key="demo_btn"):
            return "DEMO", "–§—å—é—á–µ—Ä—Å –†–¢–°-12.25 (–î–ï–ú–û)", "futures", timeframe_options[selected_timeframe]
    
    # –í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    st.sidebar.markdown("""
    <div style="background: white; padding: 1rem; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin: 1rem 0;">
        <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º</h4>
    </div>
    """, unsafe_allow_html=True)
    
    timeframe_options = {
        "5 –º–∏–Ω—É—Ç": CandleInterval.CANDLE_INTERVAL_5_MIN,
        "15 –º–∏–Ω—É—Ç": CandleInterval.CANDLE_INTERVAL_15_MIN,
        "30 –º–∏–Ω—É—Ç": CandleInterval.CANDLE_INTERVAL_30_MIN,
        "1 —á–∞—Å": CandleInterval.CANDLE_INTERVAL_HOUR,
        "1 –¥–µ–Ω—å": CandleInterval.CANDLE_INTERVAL_DAY
    }
    
    selected_timeframe = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
        list(timeframe_options.keys()),
        index=1,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 –º–∏–Ω—É—Ç
        key="timeframe_select"
    )
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    st.sidebar.markdown("""
    <div style="background: white; padding: 1rem; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin: 1rem 0;">
        <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">üìà –¢–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞</h4>
    </div>
    """, unsafe_allow_html=True)
    
    instrument_type = st.sidebar.selectbox(
        "–¢–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:",
        ["–§—å—é—á–µ—Ä—Å—ã", "–ê–∫—Ü–∏–∏", "ETF"],
        index=0,
        key="instrument_type_select"
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    @st.cache_data(ttl=300)  # –∫—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
    def get_cached_instruments(instrument_type):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            if instrument_type == "–§—å—é—á–µ—Ä—Å—ã":
                return asyncio.run(get_all_futures())
            elif instrument_type == "–ê–∫—Ü–∏–∏":
                return asyncio.run(get_all_shares())
            else:  # ETF
                return asyncio.run(get_all_etfs())
        except Exception as e:
            st.sidebar.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {instrument_type.lower()}: {e}")
            return []
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Å–ø–∏–Ω–Ω–µ—Ä–æ–º
    with st.spinner(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ {instrument_type.lower()}..."):
        instruments = get_cached_instruments(instrument_type)
    
    if not instruments:
        st.sidebar.markdown("""
        <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 10px; padding: 1rem; color: #856404;">
            ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        </div>
        """, unsafe_allow_html=True)
        return None, None, None, timeframe_options[selected_timeframe]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    st.sidebar.markdown(f"""
    <div style="background: #d4edda; border: 1px solid #c3e6cb; border-radius: 10px; padding: 1rem; color: #155724; margin: 1rem 0;">
        ‚úÖ –ù–∞–π–¥–µ–Ω–æ <strong>{len(instruments)}</strong> –∞–∫—Ç–∏–≤–Ω—ã—Ö {instrument_type.lower()}
    </div>
    """, unsafe_allow_html=True)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
    instrument_options = [format_instrument_name(instr) for instr in instruments]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –†–¢–°"
    if instrument_type == "–§—å—é—á–µ—Ä—Å—ã":
        instrument_options.insert(0, "üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –†–¢–°")
    
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    st.sidebar.markdown("""
    <div style="background: white; padding: 1rem; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin: 1rem 0;">
        <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">üîç –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞</h4>
    </div>
    """, unsafe_allow_html=True)
    
    search_term = st.sidebar.text_input(
        "–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:", 
        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ç–∏–∫–µ—Ä...",
        key="search_input"
    )
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if search_term:
        filtered_options = [opt for opt in instrument_options if search_term.upper() in opt.upper()]
        if not filtered_options:
            st.sidebar.markdown("""
            <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 10px; padding: 1rem; color: #856404;">
                ‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </div>
            """, unsafe_allow_html=True)
            return None, None, None, timeframe_options[selected_timeframe]
        instrument_options = filtered_options
    
    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    st.sidebar.markdown("""
    <div style="background: white; padding: 1rem; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin: 1rem 0;">
        <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">üìã –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞</h4>
    </div>
    """, unsafe_allow_html=True)
    
    selected_option = st.sidebar.selectbox(
        f"–í—ã–±–µ—Ä–∏—Ç–µ {instrument_type.lower()}:",
        instrument_options,
        index=0,
        key="instrument_select"
    )
    
    if selected_option == "üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –†–¢–°":
        # –ò—â–µ–º –†–¢–° —Å—Ä–µ–¥–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤
        for instr in instruments:
            if "RTS" in instr['name'].upper() or "–†–ò–£" in instr['name'].upper():
                return instr['figi'], instr['name'], "futures"
        st.sidebar.error("–†–¢–° –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
        return None, None, None, timeframe_options[selected_timeframe]
    else:
        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        for i, option in enumerate(instrument_options):
            if option == selected_option:
                if i == 0 and instrument_type == "–§—å—é—á–µ—Ä—Å—ã":
                    # –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –†–¢–°
                    continue
                else:
                    selected_instrument = instruments[i - (1 if instrument_type == "–§—å—é—á–µ—Ä—Å—ã" else 0)]
                    return selected_instrument['figi'], selected_instrument['name'], instrument_type.lower()[:-1], timeframe_options[selected_timeframe]  # —É–±–∏—Ä–∞–µ–º '—ã' –∏–ª–∏ '–∏'
    
    return None, None, None, timeframe_options[selected_timeframe]

@st.cache_data(ttl=60)
def calculate_indicators(df):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
    try:
        # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df['macd'] = MACD(close=df['close']).macd()
        df['macd_signal'] = MACD(close=df['close']).macd_signal()
        df['macd_diff'] = MACD(close=df['close']).macd_diff()
        
        df['sma_20'] = SMAIndicator(close=df['close'], window=20).sma_indicator()
        df['sma_50'] = SMAIndicator(close=df['close'], window=50).sma_indicator()
        df['ema_12'] = EMAIndicator(close=df['close'], window=12).ema_indicator()
        df['ema_26'] = EMAIndicator(close=df['close'], window=26).ema_indicator()
        
        # –ú–æ–º–µ–Ω—Ç—É–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df['rsi'] = RSIIndicator(close=df['close']).rsi()
        df['stoch_k'] = StochasticOscillator(high=df['high'], low=df['low'], close=df['close']).stoch()
        df['stoch_d'] = StochasticOscillator(high=df['high'], low=df['low'], close=df['close']).stoch_signal()
        df['williams_r'] = WilliamsRIndicator(high=df['high'], low=df['low'], close=df['close']).williams_r()
        df['roc'] = ROCIndicator(close=df['close']).roc()
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        bb = BollingerBands(close=df['close'])
        df['bb_upper'] = bb.bollinger_hband()
        df['bb_middle'] = bb.bollinger_mavg()
        df['bb_lower'] = bb.bollinger_lband()
        df['bb_width'] = bb.bollinger_wband()
        df['bb_percent'] = bb.bollinger_pband()
        
        df['atr'] = AverageTrueRange(high=df['high'], low=df['low'], close=df['close']).average_true_range()
        
        # –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df['obv'] = OnBalanceVolumeIndicator(close=df['close'], volume=df['volume']).on_balance_volume()
        df['vwap'] = VolumeWeightedAveragePrice(high=df['high'], low=df['low'], close=df['close'], volume=df['volume']).volume_weighted_average_price()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ
        df['adx'] = ADXIndicator(high=df['high'], low=df['low'], close=df['close']).adx()
        df['cci'] = CCIIndicator(high=df['high'], low=df['low'], close=df['close']).cci()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—É–º
        df['trix'] = TRIXIndicator(close=df['close']).trix()
        
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return df

def analyze(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    try:
        last = df.iloc[-1]
        
        # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        macd_signal = last['macd'] > 0
        sma_20_signal = last['close'] > last['sma_20']
        sma_50_signal = last['close'] > last['sma_50']
        ema_12_signal = last['close'] > last['ema_12']
        ema_26_signal = last['close'] > last['ema_26']
        
        # –ú–æ–º–µ–Ω—Ç—É–º —Å–∏–≥–Ω–∞–ª—ã
        rsi_signal = last['rsi'] > 55
        stoch_signal = last['stoch_k'] > 50
        williams_signal = last['williams_r'] > -50
        roc_signal = last['roc'] > 0
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª—ã
        bb_signal = last['close'] > last['bb_middle']
        bb_percent_signal = last['bb_percent'] > 0.5
        
        # –û–±—ä–µ–º–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        obv_signal = last['obv'] > df['obv'].iloc[-2] if len(df) > 1 else True
        vwap_signal = last['close'] > last['vwap']
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        adx_signal = last['adx'] > 25  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
        cci_signal = last['cci'] > 0
        trix_signal = last['trix'] > 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
        trend_votes = macd_signal + sma_20_signal + sma_50_signal + ema_12_signal + ema_26_signal
        momentum_votes = rsi_signal + stoch_signal + williams_signal + roc_signal
        volatility_votes = bb_signal + bb_percent_signal
        volume_votes = obv_signal + vwap_signal
        additional_votes = adx_signal + cci_signal + trix_signal
        
        total_votes = trend_votes + momentum_votes + volatility_votes + volume_votes + additional_votes
        max_votes = 15  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
        if total_votes >= max_votes * 0.6:  # 60% –≥–æ–ª–æ—Å–æ–≤ –∑–∞ —Ä–æ—Å—Ç
            return "UP"
        elif total_votes <= max_votes * 0.4:  # 40% –≥–æ–ª–æ—Å–æ–≤ –∑–∞ —Ä–æ—Å—Ç = –ø–∞–¥–µ–Ω–∏–µ
            return "DOWN"
        else:
            return "NEUTRAL"

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return "NEUTRAL"

async def get_candles(figi, interval=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ—á–∏ —Å Tinkoff API"""
    if interval is None:
        interval = INTERVAL
        
    try:
        async with AsyncClient(TOKEN) as client:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º timezone-aware datetime
            now = dt.datetime.now(dt.timezone.utc)
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–æ 7 –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            from_ = now - dt.timedelta(days=7)

            candles = await client.market_data.get_candles(
                figi=figi,
                from_=from_,
                to=now,
                interval=interval
            )
            
            if not candles.candles:
                st.warning("–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π")
                return pd.DataFrame()
                
            df = pd.DataFrame([{
                'time': c.time,
                'open': float(c.open.units) + c.open.nano / 1e9,
                'high': float(c.high.units) + c.high.nano / 1e9,
                'low': float(c.low.units) + c.low.nano / 1e9,
                'close': float(c.close.units) + c.close.nano / 1e9,
                'volume': c.volume
            } for c in candles.candles])
            return df

    except Exception as e:
        st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

async def get_candles_with_fallback(figi, preferred_interval=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ—á–∏ —Å fallback –Ω–∞ –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã"""
    # –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏
    if preferred_interval:
        intervals = [preferred_interval]
        # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∫–∞–∫ fallback
        all_intervals = [
            CandleInterval.CANDLE_INTERVAL_5_MIN,
            CandleInterval.CANDLE_INTERVAL_15_MIN,
            CandleInterval.CANDLE_INTERVAL_30_MIN,
            CandleInterval.CANDLE_INTERVAL_HOUR,
            CandleInterval.CANDLE_INTERVAL_DAY
        ]
        for interval in all_intervals:
            if interval != preferred_interval:
                intervals.append(interval)
    else:
        intervals = [
            CandleInterval.CANDLE_INTERVAL_5_MIN,
            CandleInterval.CANDLE_INTERVAL_15_MIN,
            CandleInterval.CANDLE_INTERVAL_30_MIN,
            CandleInterval.CANDLE_INTERVAL_HOUR,
            CandleInterval.CANDLE_INTERVAL_DAY
        ]
    
    for interval in intervals:
        df = await get_candles(figi, interval)
        if len(df) >= 20:
            return df, interval
    
    return pd.DataFrame(), None

def plot_chart(df, instrument_type_text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", interval_text="15 –º–∏–Ω—É—Ç–Ω—ã–µ", is_demo=False):
    """–°—Ç—Ä–æ–∏—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å Plotly"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∏
        fig = make_subplots(
            rows=3, cols=1,
            shared_xaxes=True,
            vertical_spacing=0.05,
            subplot_titles=('–¶–µ–Ω–∞ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã', 'RSI', 'MACD'),
            row_heights=[0.6, 0.2, 0.2]
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
        fig.add_trace(
            go.Scatter(
                x=df['time'], y=df['close'],
                mode='lines',
                name='–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è',
                line=dict(color='#2E86AB', width=2),
                hovertemplate='<b>–í—Ä–µ–º—è:</b> %{x}<br><b>–¶–µ–Ω–∞:</b> %{y:.2f}<extra></extra>'
            ),
            row=1, col=1
        )
        
        # SMA –∏ EMA
        fig.add_trace(
            go.Scatter(x=df['time'], y=df['sma_20'], mode='lines', name='SMA (20)',
                      line=dict(color='#FF6B6B', width=1, dash='solid')),
            row=1, col=1
        )
        fig.add_trace(
            go.Scatter(x=df['time'], y=df['sma_50'], mode='lines', name='SMA (50)',
                      line=dict(color='#4ECDC4', width=1, dash='solid')),
            row=1, col=1
        )
        fig.add_trace(
            go.Scatter(x=df['time'], y=df['ema_12'], mode='lines', name='EMA (12)',
                      line=dict(color='#45B7D1', width=1, dash='dot')),
            row=1, col=1
        )
        
        # –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
        fig.add_trace(
            go.Scatter(x=df['time'], y=df['bb_upper'], mode='lines', name='BB Upper',
                      line=dict(color='#95A5A6', width=1, dash='dash'), showlegend=False),
            row=1, col=1
        )
        fig.add_trace(
            go.Scatter(x=df['time'], y=df['bb_lower'], mode='lines', name='BB Lower',
                      line=dict(color='#95A5A6', width=1, dash='dash'), showlegend=False),
            row=1, col=1
        )
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª–æ—Å–∞–º–∏ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
        fig.add_trace(
            go.Scatter(
                x=df['time'].tolist() + df['time'].tolist()[::-1],
                y=df['bb_upper'].tolist() + df['bb_lower'].tolist()[::-1],
                fill='toself',
                fillcolor='rgba(149, 165, 166, 0.1)',
                line=dict(color='rgba(255,255,255,0)'),
                name='BB Zone',
                showlegend=False
            ),
            row=1, col=1
        )
        
        # VWAP
        fig.add_trace(
            go.Scatter(x=df['time'], y=df['vwap'], mode='lines', name='VWAP',
                      line=dict(color='#9B59B6', width=2)),
            row=1, col=1
        )
        
        # RSI
        fig.add_trace(
            go.Scatter(x=df['time'], y=df['rsi'], mode='lines', name='RSI',
                      line=dict(color='#9B59B6', width=2)),
            row=2, col=1
        )
        
        # –£—Ä–æ–≤–Ω–∏ RSI
        fig.add_hline(y=70, line_dash="dash", line_color="red", row=2, col=1,
                     annotation_text="–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
        fig.add_hline(y=30, line_dash="dash", line_color="green", row=2, col=1,
                     annotation_text="–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
        fig.add_hline(y=50, line_dash="solid", line_color="gray", row=2, col=1,
                     annotation_text="–ù–µ–π—Ç—Ä–∞–ª—å")
        
        # MACD
        fig.add_trace(
            go.Scatter(x=df['time'], y=df['macd'], mode='lines', name='MACD',
                      line=dict(color='#2E86AB', width=2)),
            row=3, col=1
        )
        fig.add_trace(
            go.Scatter(x=df['time'], y=df['macd_signal'], mode='lines', name='Signal',
                      line=dict(color='#FF6B6B', width=2)),
            row=3, col=1
        )
        
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ MACD
        colors = ['#4ECDC4' if val >= 0 else '#FF6B6B' for val in df['macd_diff']]
        fig.add_trace(
            go.Bar(x=df['time'], y=df['macd_diff'], name='Histogram',
                  marker_color=colors, opacity=0.6),
            row=3, col=1
        )
        
        # –ù—É–ª–µ–≤–∞—è –ª–∏–Ω–∏—è –¥–ª—è MACD
        fig.add_hline(y=0, line_dash="solid", line_color="black", row=3, col=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        demo_text = " (–î–ï–ú–û)" if is_demo else ""
        fig.update_layout(
            title=f'{instrument_type_text} –†–¢–° - {interval_text} —Å–≤–µ—á–∏{demo_text}',
            title_x=0.5,
            title_font_size=16,
            height=800,
            showlegend=True,
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            ),
            hovermode='x unified',
            template='plotly_white'
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        fig.update_xaxes(title_text="–í—Ä–µ–º—è", row=3, col=1)
        fig.update_yaxes(title_text="–¶–µ–Ω–∞", row=1, col=1)
        fig.update_yaxes(title_text="RSI", range=[0, 100], row=2, col=1)
        fig.update_yaxes(title_text="MACD", row=3, col=1)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': True})
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

def display_signals(df):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º (–±–µ–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ HTML)"""
    try:
        last = df.iloc[-1]
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        tab1, tab2, tab3, tab4 = st.tabs(["üìä –¢—Ä–µ–Ω–¥–æ–≤—ã–µ", "üìà –ú–æ–º–µ–Ω—Ç—É–º", "üìâ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", "üìä –û–±—ä–µ–º–Ω—ã–µ"])

        with tab1:
            col1, col2 = st.columns(2)
            with col1:
                st.metric(
                    label="MACD",
                    value=f"{last['macd']:.4f}",
                    delta="–ü–æ–∫—É–ø–∫–∞" if last['macd'] > 0 else "–ü—Ä–æ–¥–∞–∂–∞",
                    help="–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä MACD"
                )
                st.metric(
                    label="SMA (20)",
                    value=f"{last['sma_20']:.2f}",
                    delta="–ü–æ–∫—É–ø–∫–∞" if last['close'] > last['sma_20'] else "–ü—Ä–æ–¥–∞–∂–∞",
                    help="SMA 20"
                )
                st.metric(
                    label="EMA (20)",
                    value=f"{last['ema_20']:.2f}",
                    delta="–ü–æ–∫—É–ø–∫–∞" if last['close'] > last['ema_20'] else "–ü—Ä–æ–¥–∞–∂–∞",
                    help="EMA 20"
                )
            with col2:
                st.metric(
                    label="ADX",
                    value=f"{last['adx']:.2f}",
                    delta="–°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥" if last['adx'] > 25 else "–°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥",
                    help="ADX"
                )
                st.metric(
                    label="CCI",
                    value=f"{last['cci']:.2f}",
                    delta="–ü–æ–∫—É–ø–∫–∞" if last['cci'] > 100 else ("–ü—Ä–æ–¥–∞–∂–∞" if last['cci'] < -100 else "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"),
                    help="CCI"
                )
                st.metric(
                    label="TRIX",
                    value=f"{last['trix']:.2f}",
                    delta="–ü–æ–∫—É–ø–∫–∞" if last['trix'] > 0 else "–ü—Ä–æ–¥–∞–∂–∞",
                    help="TRIX"
                )

        with tab2:
            col1, col2 = st.columns(2)
            with col1:
                st.metric(
                    label="RSI",
                    value=f"{last['rsi']:.1f}",
                    delta="–ü–æ–∫—É–ø–∫–∞" if last['rsi'] > 55 else "–ü—Ä–æ–¥–∞–∂–∞",
                    help="RSI"
                )
                st.metric(
                    label="Stochastic %K",
                    value=f"{last['stoch_k']:.1f}",
                    delta="–ü–æ–∫—É–ø–∫–∞" if last['stoch_k'] > 50 else "–ü—Ä–æ–¥–∞–∂–∞",
                    help="Stochastic %K"
                )
                st.metric(
                    label="Williams %R",
                    value=f"{last['williams_r']:.1f}",
                    delta="–ü–æ–∫—É–ø–∫–∞" if last['williams_r'] > -50 else "–ü—Ä–æ–¥–∞–∂–∞",
                    help="Williams %R"
                )
            with col2:
                st.metric(
                    label="ROC",
                    value=f"{last['roc']:.2f}",
                    delta="–ü–æ–∫—É–ø–∫–∞" if last['roc'] > 0 else "–ü—Ä–æ–¥–∞–∂–∞",
                    help="ROC"
                )
                st.metric(
                    label="Stochastic %D",
                    value=f"{last['stoch_d']:.1f}",
                    delta="–ü–æ–∫—É–ø–∫–∞" if last['stoch_d'] > 50 else "–ü—Ä–æ–¥–∞–∂–∞",
                    help="Stochastic %D"
                )

        with tab3:
            col1, col2 = st.columns(2)
            with col1:
                st.metric(
                    label="Bollinger Bands (BB)",
                    value=f"{last['bb_middle']:.2f}",
                    delta="–í–µ—Ä—Ö–Ω—è—è" if last['close'] > last['bb_middle'] else "–ù–∏–∂–Ω—è—è",
                    help="Bollinger Bands Middle"
                )
                st.metric(
                    label="ATR",
                    value=f"{last['atr']:.2f}",
                    delta="–í—ã—Å–æ–∫–∞—è" if last['atr'] > 1 else "–ù–∏–∑–∫–∞—è",
                    help="Average True Range"
                )
            with col2:
                st.metric(
                    label="BB High",
                    value=f"{last['bb_upper']:.2f}",
                    delta="–ü—Ä–æ–±–æ–π" if last['close'] > last['bb_upper'] else "–í –ø—Ä–µ–¥–µ–ª–∞—Ö",
                    help="Bollinger Bands High"
                )
                st.metric(
                    label="BB Low",
                    value=f"{last['bb_lower']:.2f}",
                    delta="–ü—Ä–æ–±–æ–π" if last['close'] < last['bb_lower'] else "–í –ø—Ä–µ–¥–µ–ª–∞—Ö",
                    help="Bollinger Bands Low"
                )

        with tab4:
            col1, col2 = st.columns(2)
            with col1:
                st.metric(
                    label="VWAP",
                    value=f"{last['vwap']:.2f}",
                    delta="–í—ã—à–µ" if last['close'] > last['vwap'] else "–ù–∏–∂–µ",
                    help="Volume Weighted Average Price"
                )
                st.metric(
                    label="OBV",
                    value=f"{last['obv']:.2f}",
                    delta="–†–æ—Å—Ç" if last['obv'] > 0 else "–ü–∞–¥–µ–Ω–∏–µ",
                    help="On Balance Volume"
                )
            with col2:
                st.metric(
                    label="–û–±—ä—ë–º",
                    value=f"{last['volume']:.0f}",
                    delta="–†–æ—Å—Ç" if last['volume'] > 0 else "–ü–∞–¥–µ–Ω–∏–µ",
                    help="–û–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤"
                )
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
    # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    st.markdown("""
    <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
    border-radius: 20px; color: white; margin-bottom: 2rem; box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);">
        <h1 style="margin: 0; color: white; font-size: 2.5rem; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">
            üíπ –†–¢–° –¢—Ä–µ–π–¥–µ—Ä
        </h1>
        <p style="margin: 0.5rem 0 0 0; font-size: 1.2rem; opacity: 0.9;">
            –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ
    figi, instrument_name, instrument_type, selected_interval = create_instrument_selector()
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º
    if not figi:
        st.markdown("""
        <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 15px; padding: 1rem; color: #856404; margin: 1rem 0;">
            üé≠ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        </div>
        """, unsafe_allow_html=True)
        figi = "DEMO"
        instrument_name = "–§—å—é—á–µ—Ä—Å –†–¢–°-12.25 (–î–ï–ú–û)"
        instrument_type = "futures"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
    instrument_type_text = {
        "futures": "–§—å—é—á–µ—Ä—Å",
        "shares": "–ê–∫—Ü–∏—è", 
        "etf": "ETF"
    }.get(instrument_type, "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
    
    demo_text = " (–î–ï–ú–û –†–ï–ñ–ò–ú)" if figi == "DEMO" else ""
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–∞–π–¥–±–∞—Ä–µ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    st.sidebar.markdown("""
    <div style="background: white; padding: 1rem; border-radius: 15px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); margin: 1rem 0;">
        <h3 style="margin: 0 0 1rem 0; color: #2c3e50; text-align: center;">üìà –¢–µ–∫—É—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç</h3>
    </div>
    """, unsafe_allow_html=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    timeframe_text = "15 –º–∏–Ω—É—Ç"
    if selected_interval == CandleInterval.CANDLE_INTERVAL_5_MIN:
        timeframe_text = "5 –º–∏–Ω—É—Ç"
    elif selected_interval == CandleInterval.CANDLE_INTERVAL_30_MIN:
        timeframe_text = "30 –º–∏–Ω—É—Ç"
    elif selected_interval == CandleInterval.CANDLE_INTERVAL_HOUR:
        timeframe_text = "1 —á–∞—Å"
    elif selected_interval == CandleInterval.CANDLE_INTERVAL_DAY:
        timeframe_text = "1 –¥–µ–Ω—å"
    
    st.sidebar.markdown(f"""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 1rem; border-radius: 12px; margin: 1rem 0;">
        <div style="font-weight: 700; margin-bottom: 0.5rem;">{instrument_name}</div>
        <div style="font-size: 0.9rem; opacity: 0.9;">
            <div>–¢–∏–ø: {instrument_type_text}</div>
            <div>–¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe_text}</div>
            <div>FIGI: {figi}</div>
            {demo_text}
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
    st.markdown(f"""
    <div style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border: 1px solid #dee2e6; border-radius: 15px; padding: 1.5rem; margin: 1rem 0;">
        <div style="display: flex; align-items: center; gap: 1rem;">
            <div style="font-size: 2rem;">üìä</div>
            <div>
                <div style="font-weight: 700; color: #2c3e50; margin-bottom: 0.5rem;">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç</div>
                <div style="color: #6c757d;">{instrument_name} ({instrument_type_text}, —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe_text}, FIGI: {figi}){demo_text}</div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if figi == "DEMO":
        df = generate_demo_data(selected_interval)
        used_interval = selected_interval
        is_demo = True
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        @st.cache_data(ttl=180)  # –∫—ç—à –Ω–∞ 3 –º–∏–Ω—É—Ç—ã
        def get_cached_data(figi, interval):
            """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
            try:
                return asyncio.run(get_candles_with_fallback(figi, interval))
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                return pd.DataFrame(), None
        
        df, used_interval = get_cached_data(figi, selected_interval)
        is_demo = False
    
    if df.empty:
        if figi != "DEMO":
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ FIGI.")
            return
        else:
            st.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö")
            return
    
    if len(df) < 20:
        st.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 20)")
        return

    df = calculate_indicators(df)
    signal = analyze(df)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    interval_text = "15 –º–∏–Ω—É—Ç–Ω—ã–µ"
    if used_interval == CandleInterval.CANDLE_INTERVAL_HOUR:
        interval_text = "—á–∞—Å–æ–≤—ã–µ"
    elif used_interval == CandleInterval.CANDLE_INTERVAL_DAY:
        interval_text = "–¥–Ω–µ–≤–Ω—ã–µ"

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    demo_header = " (–î–ï–ú–û)" if is_demo else ""
    st.markdown(f"""
    <div style="text-align: center; margin: 2rem 0;">
        <h2 style="color: #2c3e50; margin-bottom: 1rem;">üíπ –°–∏–≥–Ω–∞–ª –ø–æ {instrument_type_text.lower()} –†–¢–° ({timeframe_text}){demo_header}</h2>
    </div>
    """, unsafe_allow_html=True)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    if signal == "UP":
        signal_class = "signal-up"
        signal_icon = "üìà"
        signal_text = "–í–í–ï–†–•"
    elif signal == "DOWN":
        signal_class = "signal-down"
        signal_icon = "üìâ"
        signal_text = "–í–ù–ò–ó"
    else:
        signal_class = "signal-neutral"
        signal_icon = "üòê"
        signal_text = "–ù–ï–ô–¢–†–ê–õ–¨–ù–û"
    
    st.markdown(f"""
    <div class="{signal_class}">
        <div style="font-size: 3rem; margin-bottom: 1rem;">{signal_icon}</div>
        <div style="font-size: 2.5rem; font-weight: 700;">{signal_text}</div>
    </div>
    """, unsafe_allow_html=True)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    display_signals(df)
    
    # –ì—Ä–∞—Ñ–∏–∫
    plot_chart(df, instrument_type_text, timeframe_text, is_demo)
    
    # –°—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    st.markdown("""
    <div class="status-container">
        <div style="font-size: 1.2rem; font-weight: 600; margin-bottom: 0.5rem;">üïê –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</div>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"""
        <div class="time-display">
            <div style="font-size: 0.9rem; color: #6c757d; margin-bottom: 0.25rem;">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</div>
            <div style="font-size: 1.1rem; font-weight: 700;">{dt.datetime.now().strftime('%H:%M:%S')}</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        if is_demo:
            st.markdown("""
            <div class="time-display">
                <div style="font-size: 0.9rem; color: #6c757d; margin-bottom: 0.25rem;">–†–µ–∂–∏–º</div>
                <div style="font-size: 1.1rem; font-weight: 700; color: #ff6b6b;">–î–ï–ú–û</div>
            </div>
            """, unsafe_allow_html=True)
        else:
            next_update = dt.datetime.now() + dt.timedelta(minutes=3)
            st.markdown(f"""
            <div class="time-display">
                <div style="font-size: 0.9rem; color: #6c757d; margin-bottom: 0.25rem;">–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</div>
                <div style="font-size: 1.1rem; font-weight: 700;">{next_update.strftime('%H:%M:%S')}</div>
            </div>
            """, unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", key="refresh_data"):
            st.rerun()
    
    with col2:
        if is_demo:
            st.markdown("""
            <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 10px; padding: 1rem; color: #856404; text-align: center;">
                üí° –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω API.
            </div>
            """, unsafe_allow_html=True)

# –ó–∞–ø—É—Å–∫ Streamlit
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        st.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
