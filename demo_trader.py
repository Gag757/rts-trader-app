import streamlit as st
import pandas as pd
import datetime as dt
import matplotlib.pyplot as plt
from ta.trend import MACD, SMAIndicator
from ta.momentum import RSIIndicator
import numpy as np

st.set_page_config(layout="wide", page_title="–†–¢–° –¢—Ä–µ–π–¥–µ—Ä - –î–µ–º–æ")

def generate_demo_data():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
    dates = pd.date_range(start=dt.datetime.now() - dt.timedelta(days=7), 
                         end=dt.datetime.now(), 
                         freq='15min')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ —à—É–º–æ–º
    np.random.seed(42)
    base_price = 1500
    trend = np.linspace(0, 50, len(dates))
    noise = np.random.normal(0, 10, len(dates))
    prices = base_price + trend + noise
    
    # –°–æ–∑–¥–∞–µ–º OHLC –¥–∞–Ω–Ω—ã–µ
    data = []
    for i, (date, price) in enumerate(zip(dates, prices)):
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º –¥–ª—è OHLC
        open_price = price + np.random.normal(0, 2)
        high_price = max(open_price, price) + abs(np.random.normal(0, 3))
        low_price = min(open_price, price) - abs(np.random.normal(0, 3))
        close_price = price + np.random.normal(0, 2)
        
        data.append({
            'time': date,
            'open': open_price,
            'high': high_price,
            'low': low_price,
            'close': close_price,
            'volume': np.random.randint(1000, 5000)
        })
    
    return pd.DataFrame(data)

@st.cache_data(ttl=60)
def calculate_indicators(df):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
    try:
        df['macd'] = MACD(close=df['close']).macd()
        df['rsi'] = RSIIndicator(close=df['close']).rsi()
        df['sma'] = SMAIndicator(close=df['close'], window=20).sma_indicator()
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return df

def analyze(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    try:
        last = df.iloc[-1]
        macd_signal = last['macd'] > 0
        rsi_signal = last['rsi'] > 55
        sma_signal = last['close'] > last['sma']
        vote_sum = macd_signal + rsi_signal + sma_signal

        if vote_sum >= 2:
            return "UP"
        elif vote_sum <= 1:
            return "DOWN"
        else:
            return "NEUTRAL"
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return "NEUTRAL"

def plot_chart(df, instrument_type_text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"):
    """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫"""
    try:
        fig, ax = plt.subplots(figsize=(12, 6))
        df.plot(x='time', y='close', ax=ax, label='–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è', linewidth=2)
        df.plot(x='time', y='sma', ax=ax, label='SMA (20)', linewidth=1, alpha=0.7)
        ax.set_title(f'{instrument_type_text} –†–¢–° - 15 –º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ (–î–ï–ú–û)', fontsize=14)
        ax.set_xlabel('–í—Ä–µ–º—è')
        ax.set_ylabel('–¶–µ–Ω–∞')
        ax.legend()
        ax.grid(True, alpha=0.3)
        st.pyplot(fig)
        plt.close(fig)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

def display_signals(df):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    try:
        last = df.iloc[-1]
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            macd_color = "green" if last['macd'] > 0 else "red"
            st.metric("MACD", f"{last['macd']:.4f}", delta_color="normal")
            st.markdown(f"<div style='color:{macd_color}; font-weight:bold;'>üìä MACD: {'–ü–û–ö–£–ü–ö–ê' if last['macd'] > 0 else '–ü–†–û–î–ê–ñ–ê'}</div>", unsafe_allow_html=True)
        
        with col2:
            rsi_color = "green" if last['rsi'] > 55 else "red"
            st.metric("RSI", f"{last['rsi']:.1f}", delta_color="normal")
            st.markdown(f"<div style='color:{rsi_color}; font-weight:bold;'>üìà RSI: {'–ü–û–ö–£–ü–ö–ê' if last['rsi'] > 55 else '–ü–†–û–î–ê–ñ–ê'}</div>", unsafe_allow_html=True)
        
        with col3:
            sma_color = "green" if last['close'] > last['sma'] else "red"
            st.metric("SMA", f"{last['sma']:.2f}", delta_color="normal")
            st.markdown(f"<div style='color:{sma_color}; font-weight:bold;'>üìâ SMA: {'–ü–û–ö–£–ü–ö–ê' if last['close'] > last['sma'] else '–ü–†–û–î–ê–ñ–ê'}</div>", unsafe_allow_html=True)
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.title("üíπ –†–¢–° –¢—Ä–µ–π–¥–µ—Ä - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–î–ï–ú–û)")
    st.markdown("---")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
    st.warning("üé≠ –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ rtstrader.py")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
    st.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: –§—å—é—á–µ—Ä—Å –†–¢–°-12.25 (–î–ï–ú–û –î–ê–ù–ù–´–ï)")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    df = generate_demo_data()
    
    if len(df) < 20:
        st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df = calculate_indicators(df)
    signal = analyze(df)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üíπ –°–∏–≥–Ω–∞–ª –ø–æ —Ñ—å—é—á–µ—Ä—Å—É –†–¢–° (15–º) - –î–ï–ú–û")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    color = "green" if signal == "UP" else "red" if signal == "DOWN" else "gray"
    label = "–í–í–ï–†–• üìà" if signal == "UP" else "–í–ù–ò–ó üìâ" if signal == "DOWN" else "–ù–ï–ô–¢–†–ê–õ–¨–ù–û üòê"
    st.markdown(f"<h1 style='color:{color}; text-align:center; padding:20px; border:2px solid {color}; border-radius:10px;'>{label}</h1>", unsafe_allow_html=True)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    display_signals(df)
    
    # –ì—Ä–∞—Ñ–∏–∫
    plot_chart(df, "–§—å—é—á–µ—Ä—Å")
    
    # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    st.markdown(f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {dt.datetime.now().strftime('%H:%M:%S')}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
    st.info("üí° –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç.")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ"):
        st.rerun()

if __name__ == "__main__":
    main()



